// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "cycles": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/rchampourlier/cycles-backend/design
// --out=$(GOPATH)/src/github.com/rchampourlier/cycles-backend
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// CreateStateContext provides the state create action context.
type CreateStateContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateStatePayload
}

// NewCreateStateContext parses the incoming request URL and body, performs validations and creates the
// context used by the state controller create action.
func NewCreateStateContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateStateContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateStateContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createStatePayload is the state create action payload.
type createStatePayload struct {
	// Application state
	State *interface{} `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createStatePayload) Validate() (err error) {
	if payload.State == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "state"))
	}
	return
}

// Publicize creates CreateStatePayload from createStatePayload
func (payload *createStatePayload) Publicize() *CreateStatePayload {
	var pub CreateStatePayload
	if payload.State != nil {
		pub.State = *payload.State
	}
	return &pub
}

// CreateStatePayload is the state create action payload.
type CreateStatePayload struct {
	// Application state
	State interface{} `form:"state" json:"state" xml:"state"`
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateStateContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateStateContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateStateContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowStateContext provides the state show action context.
type ShowStateContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewShowStateContext parses the incoming request URL and body, performs validations and creates the
// context used by the state controller show action.
func NewShowStateContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowStateContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowStateContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowStateContext) OK(r *CyclesState) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/cycles.state+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowStateContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
