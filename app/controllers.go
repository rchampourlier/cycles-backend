// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "cycles": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/rchampourlier/cycles-backend/design
// --out=$(GOPATH)/src/github.com/rchampourlier/cycles-backend
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// StateController is the controller interface for the State actions.
type StateController interface {
	goa.Muxer
	Create(*CreateStateContext) error
	Show(*ShowStateContext) error
}

// MountStateController "mounts" a State resource controller on the given service.
func MountStateController(service *goa.Service, ctrl StateController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateStateContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateStatePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	service.Mux.Handle("POST", "/states/", ctrl.MuxHandler("create", h, unmarshalCreateStatePayload))
	service.LogInfo("mount", "ctrl", "State", "action", "Create", "route", "POST /states/")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowStateContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/states/latest", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "State", "action", "Show", "route", "GET /states/latest")
}

// unmarshalCreateStatePayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateStatePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createStatePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
